/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CpinSppStakingInterface extends utils.Interface {
  functions: {
    "CDATAToken()": FunctionFragment;
    "CWATTToken()": FunctionFragment;
    "DATA_UPDATER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SPP_MANAGER_ROLE()": FunctionFragment;
    "addSpp(uint256,uint32,uint32,string)": FunctionFragment;
    "addSppProductionInfo(uint256,uint32,uint32,uint128,uint128,uint128)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateRewardsEarned(uint256,uint256)": FunctionFragment;
    "collectReward(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSppDidByIndex(uint256,uint256)": FunctionFragment;
    "getSppDidCount(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nft()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "registerDid(uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sppDatas(uint256)": FunctionFragment;
    "sppIpfsCids(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenEarnedValues(uint256,uint256)": FunctionFragment;
    "tokenIdToSppId(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenRewardIndexes(uint256,uint256)": FunctionFragment;
    "unregisterDid(uint256,uint256)": FunctionFragment;
    "updateSppIpfsCid(uint256,string)": FunctionFragment;
    "withdrawToken(uint256,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CDATAToken"
      | "CWATTToken"
      | "DATA_UPDATER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SPP_MANAGER_ROLE"
      | "addSpp"
      | "addSppProductionInfo"
      | "balanceOf"
      | "calculateRewardsEarned"
      | "collectReward"
      | "getRoleAdmin"
      | "getSppDidByIndex"
      | "getSppDidCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "multicall"
      | "nft"
      | "onERC721Received"
      | "registerDid"
      | "renounceRole"
      | "revokeRole"
      | "sppDatas"
      | "sppIpfsCids"
      | "supportsInterface"
      | "tokenEarnedValues"
      | "tokenIdToSppId"
      | "tokenOfOwnerByIndex"
      | "tokenRewardIndexes"
      | "unregisterDid"
      | "updateSppIpfsCid"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CDATAToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CWATTToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATA_UPDATER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSpp",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSppProductionInfo",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsEarned",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSppDidByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSppDidCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sppDatas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sppIpfsCids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenEarnedValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToSppId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardIndexes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterDid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSppIpfsCid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "CDATAToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CWATTToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DATA_UPDATER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSpp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSppProductionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSppDidByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSppDidCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sppDatas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sppIpfsCids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenEarnedValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToSppId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSppIpfsCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "DidRegistered(uint256,uint256)": EventFragment;
    "DidUnregistered(uint256,uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "ProductionInfoAdded(uint256,uint32,uint128,uint128,uint128)": EventFragment;
    "RewardCollected(uint256,uint256,address,uint128,uint128)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SppCreated(uint256,uint32,string)": EventFragment;
    "SppIpfsCidUpdated(uint256,string)": EventFragment;
    "TokenStaked(uint256,uint256,uint128)": EventFragment;
    "TokenWithdrawn(uint256,uint256,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DidRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DidUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductionInfoAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SppCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SppIpfsCidUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
}

export interface DidRegisteredEventObject {
  sppId: BigNumber;
  didAccountPubKey: BigNumber;
}
export type DidRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber],
  DidRegisteredEventObject
>;

export type DidRegisteredEventFilter = TypedEventFilter<DidRegisteredEvent>;

export interface DidUnregisteredEventObject {
  sppId: BigNumber;
  didAccountPubKey: BigNumber;
}
export type DidUnregisteredEvent = TypedEvent<
  [BigNumber, BigNumber],
  DidUnregisteredEventObject
>;

export type DidUnregisteredEventFilter = TypedEventFilter<DidUnregisteredEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ProductionInfoAddedEventObject {
  sppId: BigNumber;
  timestamp: number;
  productionW: BigNumber;
  cdataAmount: BigNumber;
  cwattAmount: BigNumber;
}
export type ProductionInfoAddedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber, BigNumber],
  ProductionInfoAddedEventObject
>;

export type ProductionInfoAddedEventFilter =
  TypedEventFilter<ProductionInfoAddedEvent>;

export interface RewardCollectedEventObject {
  tokenId: BigNumber;
  sppId: BigNumber;
  owner: string;
  cdataAmount: BigNumber;
  cwattAmount: BigNumber;
}
export type RewardCollectedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  RewardCollectedEventObject
>;

export type RewardCollectedEventFilter = TypedEventFilter<RewardCollectedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SppCreatedEventObject {
  sppId: BigNumber;
  startTime: number;
  infoIpfsCid: string;
}
export type SppCreatedEvent = TypedEvent<
  [BigNumber, number, string],
  SppCreatedEventObject
>;

export type SppCreatedEventFilter = TypedEventFilter<SppCreatedEvent>;

export interface SppIpfsCidUpdatedEventObject {
  sppId: BigNumber;
  ipfsCid: string;
}
export type SppIpfsCidUpdatedEvent = TypedEvent<
  [BigNumber, string],
  SppIpfsCidUpdatedEventObject
>;

export type SppIpfsCidUpdatedEventFilter =
  TypedEventFilter<SppIpfsCidUpdatedEvent>;

export interface TokenStakedEventObject {
  tokenId: BigNumber;
  sppId: BigNumber;
  capacity: BigNumber;
}
export type TokenStakedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TokenStakedEventObject
>;

export type TokenStakedEventFilter = TypedEventFilter<TokenStakedEvent>;

export interface TokenWithdrawnEventObject {
  tokenId: BigNumber;
  sppId: BigNumber;
  capacity: BigNumber;
}
export type TokenWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TokenWithdrawnEventObject
>;

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;

export interface CpinSppStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CpinSppStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CDATAToken(overrides?: CallOverrides): Promise<[string]>;

    CWATTToken(overrides?: CallOverrides): Promise<[string]>;

    DATA_UPDATER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SPP_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addSpp(
      sppId: BigNumberish,
      startTime: BigNumberish,
      maxCapacity: BigNumberish,
      infoIpfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addSppProductionInfo(
      sppId: BigNumberish,
      previousUpdateTime: BigNumberish,
      timestamp: BigNumberish,
      productionW: BigNumberish,
      cdataAmount: BigNumberish,
      cwattAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRewardsEarned(
      tokenId: BigNumberish,
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        earnedCdata: BigNumber;
        earnedCwatt: BigNumber;
      }
    >;

    collectReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSppDidByIndex(
      sppId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSppDidCount(
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      defaultAdmin: string,
      _nft: string,
      _CDATAToken: string,
      _CWATTToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sppDatas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, BigNumber, BigNumber] & {
        totalStakedCapacity: BigNumber;
        startTime: number;
        numberOfStakes: number;
        lastUpdateTime: number;
        maxCapacity: number;
        rewardIndexCDATA: BigNumber;
        rewardIndexCWATT: BigNumber;
      }
    >;

    sppIpfsCids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenEarnedValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
    >;

    tokenIdToSppId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenRewardIndexes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
    >;

    unregisterDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSppIpfsCid(
      sppId: BigNumberish,
      ipfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      tokenId: BigNumberish,
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CDATAToken(overrides?: CallOverrides): Promise<string>;

  CWATTToken(overrides?: CallOverrides): Promise<string>;

  DATA_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SPP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  addSpp(
    sppId: BigNumberish,
    startTime: BigNumberish,
    maxCapacity: BigNumberish,
    infoIpfsCid: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addSppProductionInfo(
    sppId: BigNumberish,
    previousUpdateTime: BigNumberish,
    timestamp: BigNumberish,
    productionW: BigNumberish,
    cdataAmount: BigNumberish,
    cwattAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateRewardsEarned(
    tokenId: BigNumberish,
    sppId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { earnedCdata: BigNumber; earnedCwatt: BigNumber }
  >;

  collectReward(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSppDidByIndex(
    sppId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSppDidCount(
    sppId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    defaultAdmin: string,
    _nft: string,
    _CDATAToken: string,
    _CWATTToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerDid(
    sppId: BigNumberish,
    didAccountPubKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sppDatas(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, BigNumber, BigNumber] & {
      totalStakedCapacity: BigNumber;
      startTime: number;
      numberOfStakes: number;
      lastUpdateTime: number;
      maxCapacity: number;
      rewardIndexCDATA: BigNumber;
      rewardIndexCWATT: BigNumber;
    }
  >;

  sppIpfsCids(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenEarnedValues(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
  >;

  tokenIdToSppId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenRewardIndexes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
  >;

  unregisterDid(
    sppId: BigNumberish,
    didAccountPubKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSppIpfsCid(
    sppId: BigNumberish,
    ipfsCid: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    tokenId: BigNumberish,
    owner: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CDATAToken(overrides?: CallOverrides): Promise<string>;

    CWATTToken(overrides?: CallOverrides): Promise<string>;

    DATA_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SPP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    addSpp(
      sppId: BigNumberish,
      startTime: BigNumberish,
      maxCapacity: BigNumberish,
      infoIpfsCid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSppProductionInfo(
      sppId: BigNumberish,
      previousUpdateTime: BigNumberish,
      timestamp: BigNumberish,
      productionW: BigNumberish,
      cdataAmount: BigNumberish,
      cwattAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      tokenId: BigNumberish,
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        earnedCdata: BigNumber;
        earnedCwatt: BigNumber;
      }
    >;

    collectReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSppDidByIndex(
      sppId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSppDidCount(
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      defaultAdmin: string,
      _nft: string,
      _CDATAToken: string,
      _CWATTToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nft(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registerDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sppDatas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, BigNumber, BigNumber] & {
        totalStakedCapacity: BigNumber;
        startTime: number;
        numberOfStakes: number;
        lastUpdateTime: number;
        maxCapacity: number;
        rewardIndexCDATA: BigNumber;
        rewardIndexCWATT: BigNumber;
      }
    >;

    sppIpfsCids(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenEarnedValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
    >;

    tokenIdToSppId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenRewardIndexes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueCDATA: BigNumber; valueCWATT: BigNumber }
    >;

    unregisterDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSppIpfsCid(
      sppId: BigNumberish,
      ipfsCid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      tokenId: BigNumberish,
      owner: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DidRegistered(uint256,uint256)"(
      sppId?: null,
      didAccountPubKey?: null
    ): DidRegisteredEventFilter;
    DidRegistered(
      sppId?: null,
      didAccountPubKey?: null
    ): DidRegisteredEventFilter;

    "DidUnregistered(uint256,uint256)"(
      sppId?: null,
      didAccountPubKey?: null
    ): DidUnregisteredEventFilter;
    DidUnregistered(
      sppId?: null,
      didAccountPubKey?: null
    ): DidUnregisteredEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ProductionInfoAdded(uint256,uint32,uint128,uint128,uint128)"(
      sppId?: null,
      timestamp?: null,
      productionW?: null,
      cdataAmount?: null,
      cwattAmount?: null
    ): ProductionInfoAddedEventFilter;
    ProductionInfoAdded(
      sppId?: null,
      timestamp?: null,
      productionW?: null,
      cdataAmount?: null,
      cwattAmount?: null
    ): ProductionInfoAddedEventFilter;

    "RewardCollected(uint256,uint256,address,uint128,uint128)"(
      tokenId?: null,
      sppId?: null,
      owner?: null,
      cdataAmount?: null,
      cwattAmount?: null
    ): RewardCollectedEventFilter;
    RewardCollected(
      tokenId?: null,
      sppId?: null,
      owner?: null,
      cdataAmount?: null,
      cwattAmount?: null
    ): RewardCollectedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SppCreated(uint256,uint32,string)"(
      sppId?: null,
      startTime?: null,
      infoIpfsCid?: null
    ): SppCreatedEventFilter;
    SppCreated(
      sppId?: null,
      startTime?: null,
      infoIpfsCid?: null
    ): SppCreatedEventFilter;

    "SppIpfsCidUpdated(uint256,string)"(
      sppId?: null,
      ipfsCid?: null
    ): SppIpfsCidUpdatedEventFilter;
    SppIpfsCidUpdated(
      sppId?: null,
      ipfsCid?: null
    ): SppIpfsCidUpdatedEventFilter;

    "TokenStaked(uint256,uint256,uint128)"(
      tokenId?: null,
      sppId?: null,
      capacity?: null
    ): TokenStakedEventFilter;
    TokenStaked(
      tokenId?: null,
      sppId?: null,
      capacity?: null
    ): TokenStakedEventFilter;

    "TokenWithdrawn(uint256,uint256,uint128)"(
      tokenId?: null,
      sppId?: null,
      capacity?: null
    ): TokenWithdrawnEventFilter;
    TokenWithdrawn(
      tokenId?: null,
      sppId?: null,
      capacity?: null
    ): TokenWithdrawnEventFilter;
  };

  estimateGas: {
    CDATAToken(overrides?: CallOverrides): Promise<BigNumber>;

    CWATTToken(overrides?: CallOverrides): Promise<BigNumber>;

    DATA_UPDATER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SPP_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addSpp(
      sppId: BigNumberish,
      startTime: BigNumberish,
      maxCapacity: BigNumberish,
      infoIpfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addSppProductionInfo(
      sppId: BigNumberish,
      previousUpdateTime: BigNumberish,
      timestamp: BigNumberish,
      productionW: BigNumberish,
      cdataAmount: BigNumberish,
      cwattAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      tokenId: BigNumberish,
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSppDidByIndex(
      sppId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSppDidCount(
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      defaultAdmin: string,
      _nft: string,
      _CDATAToken: string,
      _CWATTToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sppDatas(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sppIpfsCids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenEarnedValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToSppId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenRewardIndexes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSppIpfsCid(
      sppId: BigNumberish,
      ipfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      tokenId: BigNumberish,
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CDATAToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CWATTToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DATA_UPDATER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SPP_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSpp(
      sppId: BigNumberish,
      startTime: BigNumberish,
      maxCapacity: BigNumberish,
      infoIpfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addSppProductionInfo(
      sppId: BigNumberish,
      previousUpdateTime: BigNumberish,
      timestamp: BigNumberish,
      productionW: BigNumberish,
      cdataAmount: BigNumberish,
      cwattAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardsEarned(
      tokenId: BigNumberish,
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSppDidByIndex(
      sppId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSppDidCount(
      sppId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      defaultAdmin: string,
      _nft: string,
      _CDATAToken: string,
      _CWATTToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sppDatas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sppIpfsCids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenEarnedValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToSppId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenRewardIndexes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterDid(
      sppId: BigNumberish,
      didAccountPubKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSppIpfsCid(
      sppId: BigNumberish,
      ipfsCid: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      tokenId: BigNumberish,
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
