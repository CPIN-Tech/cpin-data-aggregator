/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ReleaseCpinInterface extends utils.Interface {
  functions: {
    "accountAllocations(address)": FunctionFragment;
    "accountClaims(address)": FunctionFragment;
    "allocate(address[],uint256[])": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "cliffEndTime()": FunctionFragment;
    "decimals()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "endTime()": FunctionFragment;
    "interval()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "recover(address,address,uint256)": FunctionFragment;
    "releasableSupply()": FunctionFragment;
    "releasableSupplyOfPrincipal(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startTime()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unallocated()": FunctionFragment;
    "updateTiming(uint64,uint64,uint64,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountAllocations"
      | "accountClaims"
      | "allocate"
      | "balanceOf"
      | "claim"
      | "cliffEndTime"
      | "decimals"
      | "earned"
      | "endTime"
      | "interval"
      | "name"
      | "owner"
      | "recover"
      | "releasableSupply"
      | "releasableSupplyOfPrincipal"
      | "renounceOwnership"
      | "startTime"
      | "symbol"
      | "token"
      | "totalSupply"
      | "transferOwnership"
      | "unallocated"
      | "updateTiming"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountAllocations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountClaims",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releasableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasableSupplyOfPrincipal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unallocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTiming",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasableSupplyOfPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unallocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTiming",
    data: BytesLike
  ): Result;

  events: {
    "Allocated(address,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AllocatedEventObject {
  owner: string;
  amount: BigNumber;
}
export type AllocatedEvent = TypedEvent<
  [string, BigNumber],
  AllocatedEventObject
>;

export type AllocatedEventFilter = TypedEventFilter<AllocatedEvent>;

export interface ClaimedEventObject {
  owner: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ReleaseCpin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReleaseCpinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accountClaims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allocate(
      _holders: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cliffEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    earned(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    interval(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recover(
      to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    releasableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    releasableSupplyOfPrincipal(
      _principal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unallocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTiming(
      startTime_: BigNumberish,
      cliffEndTime_: BigNumberish,
      endTime_: BigNumberish,
      interval_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accountAllocations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accountClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allocate(
    _holders: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cliffEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  interval(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  recover(
    to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  releasableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  releasableSupplyOfPrincipal(
    _principal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unallocated(overrides?: CallOverrides): Promise<BigNumber>;

  updateTiming(
    startTime_: BigNumberish,
    cliffEndTime_: BigNumberish,
    endTime_: BigNumberish,
    interval_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      _holders: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    cliffEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    recover(
      to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    releasableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    releasableSupplyOfPrincipal(
      _principal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unallocated(overrides?: CallOverrides): Promise<BigNumber>;

    updateTiming(
      startTime_: BigNumberish,
      cliffEndTime_: BigNumberish,
      endTime_: BigNumberish,
      interval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Allocated(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): AllocatedEventFilter;
    Allocated(owner?: string | null, amount?: null): AllocatedEventFilter;

    "Claimed(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(owner?: string | null, amount?: null): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    accountAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      _holders: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    cliffEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    releasableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    releasableSupplyOfPrincipal(
      _principal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unallocated(overrides?: CallOverrides): Promise<BigNumber>;

    updateTiming(
      startTime_: BigNumberish,
      cliffEndTime_: BigNumberish,
      endTime_: BigNumberish,
      interval_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAllocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountClaims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocate(
      _holders: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cliffEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    releasableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasableSupplyOfPrincipal(
      _principal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unallocated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTiming(
      startTime_: BigNumberish,
      cliffEndTime_: BigNumberish,
      endTime_: BigNumberish,
      interval_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
