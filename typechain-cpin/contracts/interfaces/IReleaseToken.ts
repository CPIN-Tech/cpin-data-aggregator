/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IReleaseTokenInterface extends utils.Interface {
  functions: {
    "allocate(address[],uint256[])": FunctionFragment;
    "claim()": FunctionFragment;
    "earned(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "allocate" | "claim" | "earned"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocate",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;

  events: {
    "Allocated(address,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export interface AllocatedEventObject {
  owner: string;
  amount: BigNumber;
}
export type AllocatedEvent = TypedEvent<
  [string, BigNumber],
  AllocatedEventObject
>;

export type AllocatedEventFilter = TypedEventFilter<AllocatedEvent>;

export interface ClaimedEventObject {
  owner: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface IReleaseToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReleaseTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      _holders: string[],
      _balances: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    earned(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allocate(
    _holders: string[],
    _balances: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allocate(
      _holders: string[],
      _balances: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Allocated(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): AllocatedEventFilter;
    Allocated(owner?: string | null, amount?: null): AllocatedEventFilter;

    "Claimed(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(owner?: string | null, amount?: null): ClaimedEventFilter;
  };

  estimateGas: {
    allocate(
      _holders: string[],
      _balances: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    earned(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _holders: string[],
      _balances: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    earned(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
